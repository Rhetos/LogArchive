Module Common
{
    Entity LogArchive
    {
        DateTime Created { Required; }
        ShortString UserName { Required; }
        ShortString Workstation { Required; }
        ShortString ContextInfo;
        ShortString Action { Required; }
        ShortString TableName;
        Guid ItemId { SqlIndex; }
        LongString Description;
        
        SqlIndexMultiple 'TableName Action';
		DenyUserEdit;
    }

    Entity LogRelatedItemArchive
    {
        Reference Log Common.LogArchive { Detail; Required; }
        ShortString TableName { SqlIndex; }
        Guid ItemId { SqlIndex; }
        ShortString Relation; // Describes what is the referenced Log.ItemId to the LogRelatedItem.ItemId.
        
        DenyUserEdit;
    }

    LogReaderAdditionalSource LogReader.LocalArchive <SQL\LogReaderAdditionalSource.sql>
    {
        SqlDependsOn Common.LogArchive;
    }

    LogReaderAdditionalSource LogRelatedItemReader.LocalArchive <SQL\LogRelatedItemReaderAdditionalSource.sql>
    {
        SqlDependsOn Common.LogRelatedItemArchive;
    }

    //===============================================================

    SqlProcedure MoveLogToArchive "" <SQL\MoveLogToArchive.sql>
    {
        SqlDependsOn Common.Log;
        SqlDependsOn Common.LogArchive;
        SqlDependsOn Common.LogRelatedItem;
        SqlDependsOn Common.LogRelatedItemArchive;
    }

    Action MoveLogToArchive '(parameters, repository, userInfo) =>
        {
            int timeoutSeconds = _configuration.GetInt("Rhetos.LogArchive.TimeoutSeconds", 1800).Value;

            var sqlCommand = new System.Data.SqlClient.SqlCommand(
                "EXEC Common.MoveLogToArchive",
                (System.Data.SqlClient.SqlConnection)_executionContext.PersistenceTransaction.Connection,
                (System.Data.SqlClient.SqlTransaction)_executionContext.PersistenceTransaction.Transaction)
                {
                    CommandTimeout = timeoutSeconds
                };
            sqlCommand.ExecuteNonQuery();
        }'
    {
        RepositoryUses '_configuration' 'Rhetos.Utilities.IConfiguration';
    }

    //===============================================================
    
    SqlProcedure MoveLogToArchivePartial "" <SQL\MoveLogToArchivePartial.sql>
    {
        SqlDependsOn Common.Log;
        SqlDependsOn Common.LogArchive;
        SqlDependsOn Common.LogRelatedItem;
        SqlDependsOn Common.LogRelatedItemArchive;
    }

    Action MoveLogToArchivePartial '(parameters, repository, userInfo) =>
        {
            int timeoutSeconds = _configuration.GetInt("Rhetos.LogArchive.TimeoutSeconds", 1800).Value;

            var sqlCommand = new System.Data.SqlClient.SqlCommand(
                "EXEC Common.MoveLogToArchivePartial",
                (System.Data.SqlClient.SqlConnection)_executionContext.PersistenceTransaction.Connection,
                (System.Data.SqlClient.SqlTransaction)_executionContext.PersistenceTransaction.Transaction)
                {
                    CommandTimeout = timeoutSeconds
                };
            sqlCommand.ExecuteNonQuery();
        }'
    {
        RepositoryUses '_configuration' 'Rhetos.Utilities.IConfiguration';
    }
}
